// server/routes/cart.js
const express = require('express');
const CartItem = require('../model/inventory');

const router = express.Router();

// Add item to cart
router.post('/add', async (req, res) => {
  const { userId, itemId, name, price } = req.body;

  try {
    const existingItem = await CartItem.findOne({ userId, itemId });
    if (existingItem) {
      // If the item already exists in the cart, update the quantity
      existingItem.quantity += 1;
      await existingItem.save();
      return res.status(200).json({ message: 'Item quantity updated', item: existingItem });
    }

    const newCartItem = new CartItem({ userId, itemId, name, price });
    await newCartItem.save();
    return res.status(201).json({ message: 'Item added to cart', item: newCartItem });
  } catch (error) {
    return res.status(500).json({ error: 'Failed to add item to cart' });
  }
});

// Get items in cart
router.get('/:userId', async (req, res) => {
  try {
    const cartItems = await CartItem.find({ userId: req.params.userId });
    return res.status(200).json(cartItems);
  } catch (error) {
    return res.status(500).json({ error: 'Failed to retrieve cart items' });
  }
});

// Remove item from cart
router.delete('/remove/:id', async (req, res) => {
  try {
    await CartItem.findByIdAndRemove(req.params.id);
    return res.status(200).json({ message: 'Item removed from cart' });
  } catch (error) {
    return res.status(500).json({ error: 'Failed to remove item from cart' });
  }
});

// Clear cart (optional)
router.delete('/clear/:userId', async (req, res) => {
  try {
    await CartItem.deleteMany({ userId: req.params.userId });
    return res.status(200).json({ message: 'Cart cleared' });
  } catch (error) {
    return res.status(500).json({ error: 'Failed to clear cart' });
  }
});

module.exports = router;
